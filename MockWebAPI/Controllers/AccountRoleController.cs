//---------------------------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by peppapig from database table definition.
//	Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Web.Http;
using LinqToDB;
using LinqToDB.Data;

using peppa.Domain;

namespace MockWebAPI.Controllers
{
	/// <summary>
	/// アカウントロールのWebAPI
	/// </summary>
	[RoutePrefix("api/accountrole")]
	public partial class AccountRoleController : ApiController
	{
		/// <summary>
		/// アカウントロールの検索
		/// </summary>
		/// <param name="c"></param>
		/// <returns></returns>
		[HttpGet, Route("search")]
		public IEnumerable<AccountRole> Search([FromUri]AccountRoleCondition c)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				var list =
					c == null ? db.AccountRole.ToList() :
					db.AccountRole.Where(c.CreatePredicate()).ToList();
				return list;
			}
		}

		/// <summary>
		/// アカウントロールの取得
		/// </summary>
		/// <param name="accountId">アカウントID(account_id)</param>
		/// <param name="roleId">ロールID(role_id)</param>
		/// <returns></returns>
		[HttpGet, Route("get/{accountId}/{roleId}")]
		public AccountRole Get(int accountId, string roleId)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				var o = db.AccountRole.Find(accountId, roleId);
				return o;
			}
		}

		/// <summary>
		/// アカウントロールの作成
		/// </summary>
		/// <param name="o"></param>
		/// <returns>uid</returns>
		[HttpPost, Route("create")]
		public int Post([FromBody]AccountRole o)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				int uid = (int)db.InsertWithIdentity<AccountRole>(o);
				return uid;
			}
		}

		/// <summary>
		/// アカウントロールの更新
		/// </summary>
		/// <param name="accountId">アカウントID(account_id)</param>
		/// <param name="roleId">ロールID(role_id)</param>
		/// <param name="o"></param>
		/// <returns>更新件数</returns>
		[HttpPut, Route("modify/{accountId}/{roleId}")]
		public int Modify(int accountId, string roleId, [FromBody]AccountRole o)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				var count = db.Update<AccountRole>(o);
				return count;
			}
		}

		/// <summary>
		/// アカウントロールの削除(物理)
		/// </summary>
		/// <param name="accountId">アカウントID(account_id)</param>
		/// <param name="roleId">ロールID(role_id)</param>
		[HttpDelete, Route("remove/{accountId}/{roleId}")]
		public int Remove(int accountId, string roleId)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				var o = db.AccountRole.Find(accountId, roleId);
				var count = db.Delete<AccountRole>(o);
				return count;
			}
		}
	}
}
