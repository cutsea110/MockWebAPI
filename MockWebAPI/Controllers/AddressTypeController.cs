//---------------------------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by peppapig from database table definition.
//	Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Web.Http;
using LinqToDB;
using LinqToDB.Data;

using peppa.Domain;

namespace MockWebAPI.Controllers
{
	/// <summary>
	/// 住所種別のWebAPI
	/// </summary>
	[RoutePrefix("api/addresstype")]
	public partial class AddressTypeController : ApiController
	{
		/// <summary>
		/// 住所種別の検索
		/// </summary>
		/// <param name="c"></param>
		/// <returns></returns>
		[HttpGet, Route("search")]
		public IEnumerable<AddressType> Search([FromUri]AddressTypeCondition c)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				var list =
					c == null ? db.AddressType.ToList() :
					db.AddressType.Where(c.CreatePredicate()).ToList();
				return list;
			}
		}

		/// <summary>
		/// 住所種別の取得
		/// </summary>
		/// <param name="addressTypeId">住所種別ID(address_type_id)</param>
		/// <returns></returns>
		[HttpGet, Route("get/{addressTypeId}")]
		public AddressType Get(int addressTypeId)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				var o = db.AddressType.Find(addressTypeId);
				return o;
			}
		}

		/// <summary>
		/// 住所種別の作成
		/// </summary>
		/// <param name="o"></param>
		/// <returns>uid</returns>
		[HttpPost, Route("create")]
		public int Post([FromBody]AddressType o)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				int uid = (int)db.InsertWithIdentity<AddressType>(o);
				return uid;
			}
		}

		/// <summary>
		/// 住所種別の更新
		/// </summary>
		/// <param name="addressTypeId">住所種別ID(address_type_id)</param>
		/// <param name="o"></param>
		/// <returns>更新件数</returns>
		[HttpPut, Route("modify/{addressTypeId}")]
		public int Modify(int addressTypeId, [FromBody]AddressType o)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				var count = db.Update<AddressType>(o);
				return count;
			}
		}

		/// <summary>
		/// 住所種別の削除(論理)
		/// </summary>
		/// <param name="addressTypeId">住所種別ID(address_type_id)</param>
		[HttpDelete, Route("remove/{addressTypeId}")]
		public int Remove(int addressTypeId)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				var o = db.AddressType.Find(addressTypeId);
				o.removed_at = DateTime.Now;
				var count = db.Update<AddressType>(o);
				return count;
			}
		}
	}
}
